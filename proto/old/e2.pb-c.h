/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: e2.proto */

#ifndef PROTOBUF_C_e2_2eproto__INCLUDED
#define PROTOBUF_C_e2_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct Enumtest Enumtest;
typedef struct SimpleMessage SimpleMessage;
typedef struct E2Request E2Request;
typedef struct E2DummyResponse E2DummyResponse;
typedef struct MapFieldEntry MapFieldEntry;
typedef struct MapMess MapMess;


/* --- enums --- */

typedef enum _Etype {
  ETYPE__TYPE1 = 1,
  ETYPE__TYPE2 = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ETYPE)
} Etype;

/* --- messages --- */

struct  Enumtest
{
  ProtobufCMessage base;
  int32_t a;
  Etype et;
};
#define ENUMTEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&enumtest__descriptor) \
    , 0, ETYPE__TYPE1 }


struct  SimpleMessage
{
  ProtobufCMessage base;
  int32_t lucky_number;
};
#define SIMPLE_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&simple_message__descriptor) \
    , 0 }


struct  E2Request
{
  ProtobufCMessage base;
  uint32_t req_id;
};
#define E2_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&e2_request__descriptor) \
    , 0 }


struct  E2DummyResponse
{
  ProtobufCMessage base;
  uint32_t req_id;
  char *mess_string;
  protobuf_c_boolean result;
};
#define E2_DUMMY_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&e2_dummy_response__descriptor) \
    , 0, NULL, 0 }


struct  MapFieldEntry
{
  ProtobufCMessage base;
  int32_t key;
  int32_t value;
};
#define MAP_FIELD_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&map_field_entry__descriptor) \
    , 0, 0 }


struct  MapMess
{
  ProtobufCMessage base;
  size_t n_map_field;
  MapFieldEntry **map_field;
};
#define MAP_MESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&map_mess__descriptor) \
    , 0,NULL }


/* Enumtest methods */
void   enumtest__init
                     (Enumtest         *message);
size_t enumtest__get_packed_size
                     (const Enumtest   *message);
size_t enumtest__pack
                     (const Enumtest   *message,
                      uint8_t             *out);
size_t enumtest__pack_to_buffer
                     (const Enumtest   *message,
                      ProtobufCBuffer     *buffer);
Enumtest *
       enumtest__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   enumtest__free_unpacked
                     (Enumtest *message,
                      ProtobufCAllocator *allocator);
/* SimpleMessage methods */
void   simple_message__init
                     (SimpleMessage         *message);
size_t simple_message__get_packed_size
                     (const SimpleMessage   *message);
size_t simple_message__pack
                     (const SimpleMessage   *message,
                      uint8_t             *out);
size_t simple_message__pack_to_buffer
                     (const SimpleMessage   *message,
                      ProtobufCBuffer     *buffer);
SimpleMessage *
       simple_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   simple_message__free_unpacked
                     (SimpleMessage *message,
                      ProtobufCAllocator *allocator);
/* E2Request methods */
void   e2_request__init
                     (E2Request         *message);
size_t e2_request__get_packed_size
                     (const E2Request   *message);
size_t e2_request__pack
                     (const E2Request   *message,
                      uint8_t             *out);
size_t e2_request__pack_to_buffer
                     (const E2Request   *message,
                      ProtobufCBuffer     *buffer);
E2Request *
       e2_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   e2_request__free_unpacked
                     (E2Request *message,
                      ProtobufCAllocator *allocator);
/* E2DummyResponse methods */
void   e2_dummy_response__init
                     (E2DummyResponse         *message);
size_t e2_dummy_response__get_packed_size
                     (const E2DummyResponse   *message);
size_t e2_dummy_response__pack
                     (const E2DummyResponse   *message,
                      uint8_t             *out);
size_t e2_dummy_response__pack_to_buffer
                     (const E2DummyResponse   *message,
                      ProtobufCBuffer     *buffer);
E2DummyResponse *
       e2_dummy_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   e2_dummy_response__free_unpacked
                     (E2DummyResponse *message,
                      ProtobufCAllocator *allocator);
/* MapFieldEntry methods */
void   map_field_entry__init
                     (MapFieldEntry         *message);
size_t map_field_entry__get_packed_size
                     (const MapFieldEntry   *message);
size_t map_field_entry__pack
                     (const MapFieldEntry   *message,
                      uint8_t             *out);
size_t map_field_entry__pack_to_buffer
                     (const MapFieldEntry   *message,
                      ProtobufCBuffer     *buffer);
MapFieldEntry *
       map_field_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   map_field_entry__free_unpacked
                     (MapFieldEntry *message,
                      ProtobufCAllocator *allocator);
/* MapMess methods */
void   map_mess__init
                     (MapMess         *message);
size_t map_mess__get_packed_size
                     (const MapMess   *message);
size_t map_mess__pack
                     (const MapMess   *message,
                      uint8_t             *out);
size_t map_mess__pack_to_buffer
                     (const MapMess   *message,
                      ProtobufCBuffer     *buffer);
MapMess *
       map_mess__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   map_mess__free_unpacked
                     (MapMess *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Enumtest_Closure)
                 (const Enumtest *message,
                  void *closure_data);
typedef void (*SimpleMessage_Closure)
                 (const SimpleMessage *message,
                  void *closure_data);
typedef void (*E2Request_Closure)
                 (const E2Request *message,
                  void *closure_data);
typedef void (*E2DummyResponse_Closure)
                 (const E2DummyResponse *message,
                  void *closure_data);
typedef void (*MapFieldEntry_Closure)
                 (const MapFieldEntry *message,
                  void *closure_data);
typedef void (*MapMess_Closure)
                 (const MapMess *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    etype__descriptor;
extern const ProtobufCMessageDescriptor enumtest__descriptor;
extern const ProtobufCMessageDescriptor simple_message__descriptor;
extern const ProtobufCMessageDescriptor e2_request__descriptor;
extern const ProtobufCMessageDescriptor e2_dummy_response__descriptor;
extern const ProtobufCMessageDescriptor map_field_entry__descriptor;
extern const ProtobufCMessageDescriptor map_mess__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_e2_2eproto__INCLUDED */
